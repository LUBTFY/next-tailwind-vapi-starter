# cloudbuild.yaml

steps:
  # Step 1: Build the Docker image using your Dockerfile
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t',
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}',
      '.'
    ]
    id: 'Build Docker Image'

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}']
    id: 'Push to Artifact Registry'

  # Step 3: Deploy the image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'run',
      'deploy',
      '${_SERVICE_NAME}',
      '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}',
      '--region=${_REGION}',
      '--platform=managed',
      '--allow-unauthenticated',
      '--port=3000',
      '--set-secrets=VAPI_API_KEY=vapi-api-key:latest',
      '--memory=512Mi',
      '--timeout=300s'
    ]
    id: 'Deploy to Cloud Run'

images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}'

substitutions:
  _REGION: 'us-central1'
  _AR_REPO_NAME: 'nextjs-apps'
  _IMAGE_NAME: 'rotating-orb'
  _SERVICE_NAME: 'rotating-orb'

# Specify your custom logs bucket
logsBucket: 'gs://vapi-orb_cloudbuild' # MAKE SURE THIS BUCKET EXISTS

# Specify your CUSTOM Cloud Build service account email
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
# Note: The project ID part is important. If 'vapi-orb' is your project ID, then it would be:
# serviceAccount: 'projects/vapi-orb/serviceAccounts/cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
# OR more generally:
# serviceAccount: 'cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
# The console usually shows the full path. If 'vapi-orb' IS your project ID, the last one is simpler.
# Let's use the most explicit form for clarity if ${PROJECT_ID} is indeed 'vapi-orb'.
# If ${PROJECT_ID} is different, adjust accordingly.
#
# Given the SA email format cloud-build-sa@PROJECT_ID.iam.gserviceaccount.com,
# it should be:
# serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/cloud-build-sa@${PROJECT_ID}.iam.gserviceaccount.com'
#
# Let's assume 'vapi-orb' in 'cloud-build-sa@vapi-orb.iam.gserviceaccount.com' refers to your PROJECT_ID.
# So, if PROJECT_ID is indeed 'vapi-orb', then this is correct:
# serviceAccount: 'projects/vapi-orb/serviceAccounts/cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
#
# To be absolutely safe and use the substitution variable if it's defined:
# serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/cloud-build-sa@${PROJECT_ID}.iam.gserviceaccount.com'
#
# However, since your service account email is literally 'cloud-build-sa@vapi-orb.iam.gserviceaccount.com',
# and assuming 'vapi-orb' IS your project ID:
# serviceAccount: 'cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
#
# To be perfectly clear and match what's shown in IAM if that service account belongs to the project defined by ${PROJECT_ID}:
# serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
#
# Let's try the most direct email you provided:
# serviceAccount: 'cloud-build-sa@vapi-orb.iam.gserviceaccount.com'
#
# Final Answer for serviceAccount based on your screenshot, assuming vapi-orb is the project ID.
# The format projects/${PROJECT_ID}/serviceAccounts/SERVICE_ACCOUNT_EMAIL is a bit redundant if the email already contains the project.
# The most common way to specify is just the email.
serviceAccount: 'cloud-build-sa@vapi-orb.iam.gserviceaccount.com'